{"version":3,"sources":["../utils/checked-list.scss","checked-right-image.scss","../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAAA,cACE,SAAU,CACV,QAAS,CACT,eAAgB,CAHlB,iBAOI,sBAAuB,CACvB,iBAAkB,CAClB,QAAS,CACT,eAAgB,CAChB,gBAAiB,CACjB,cAAe,CAZnB,wBAeM,iBAAkB,CAClB,MAAO,CACP,OAAQ,CACR,UAAW,CACX,UAAW,CACX,WAAY,CACZ,mFAAsE,CAK5E,WACE,cAAe,CACf,WAAY,CACZ,UAAW,CC1Bb,qBACE,YAAa,CACb,kBAAmB,CCoEjB,4BDtEJ,qBAKI,aAAc,CA8BjB,CA3BC,6BACE,gBAAmB,CACnB,QAAS,CACT,cAAe,CAGjB,2BACE,SAAU,CACV,kBAAmB,CCsDnB,4BDxDF,2BAKI,UAAW,CAEd,CAED,4BACE,SAAU,CC8CV,4BD/CF,4BAII,UAAW,CAEd,CAED,0BACE,cAAe,CACf,WAAY","file":"checked-right-image.css","sourceRoot":"../widget","sourcesContent":[".checked-list {\n  padding: 0;\n  margin: 0;\n  max-width: 500px;\n\n\n  li {\n    padding: 5px 0 5px 35px;\n    position: relative;\n    margin: 0;\n    list-style: none;\n    line-height: 24px;\n    font-size: 16px;\n\n    &:before {\n      position: absolute;\n      left: 0;\n      top: 7px;\n      width: 20px;\n      content: '';\n      height: 20px;\n      background: url('#{$path-editor}/checked.svg') no-repeat center center;\n    }\n  }\n}\n\n.img-fluid {\n  max-width: 100%;\n  height: auto;\n  width: 100%;\n}\n","@import \"../core/bootstrap\";\n@import \"utils/checked-list\";\n\n.checked-right-image {\n  display: flex;\n  align-items: center;\n\n  @include media-breakpoint-down(sm) {\n    display: block;\n  }\n\n  &__header {\n    padding: 0 0 20px 0;\n    margin: 0;\n    font-size: 28px;\n  }\n\n  &__list {\n    width: 50%;\n    padding: 0 0 0 40px;\n\n    @include media-breakpoint-down(sm) {\n      width: 100%;\n    }\n  }\n\n  &__image {\n    width: 50%;\n\n    @include media-breakpoint-down(sm) {\n      width: 100%;\n    }\n  }\n\n  &__img {\n    max-width: 100%;\n    height: auto;\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}